
Chapter 6 : Exploring The World

===> Monolith Architecture


===> Micro service Architecture

==> The 2 approaches to know how the web apps / UI applications fetche the data from the Backend
    * First Approach is :: As soon as the page loads -> make the API call to, wait for data to come ->  then render the UI
	* Second Approach is :: As soon as the page loads -> we'll render the UI -> Then make the API -> Then  
	   and as soon as the data comes from API, render the data very quickly
	   
	* NOTE: In React, we should always use the 2nd approach
	
===> What is CORS?
Ans: CORS - Cross Origin Resourse Sharing

===> What is useEffect()?
Ans: useEffect() is a hook in React, introduced in React 16.8, that allows you to perform side effects in your functional components.
     * Side effects can include
	   - data fetching,
	   - DOM manipulation,
	   - setting up subscriptions, or 
	   - manually changing the React component's state.
	   
===> When is useEffect() Called?
Ans: * If No Dependency Array : useEffect() is called every time a component renders.
       That is, useEffect() gets called every time AFTER a component is rendered, when the dependency array NOT PASSED as an argument
	 Eg:
	 useEffect(()=>{
        console.log("useEffect is called");
	 });
	   
	 * If The Dependency Array is EMPTY : useEffect() is called only AFTER FIRST render of a component
	 Eg:
	 useEffect(()=>{
        console.log("useEffect is called");
     },[]);
	 
	 * If The Dependency Array has some value / dependency : Then useEffect() is called every time the dependency is UPDATED
	 Eg:
	 useEffect(()=>{
        console.log("useEffect is called");
     },[loginLogoutBtn]);
	 Here, loginLogoutBtn is the dependency given. SO every time this updates, useEffect will be called.
	
